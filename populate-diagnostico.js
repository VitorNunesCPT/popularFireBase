const { db } = require('./firebase-config');
const {
  metodosLaboratoriais,
  metodosImunologicos,
  metodosImagem,
  fluxogramaDiagnostico,
  diagnosticoDiferencial,
  biomarcadores,
  algoritmoTratamento,
  criteriosEspeciais,
} = require('./data/diagnostico-data');

async function populateDiagnostico() {
  try {
    console.log('üîÑ Iniciando popula√ß√£o da subcole√ß√£o em card_3...');

    const batch = db.batch();

    // Refer√™ncia para o card_3 (Diagn√≥stico)
    const card3Ref = db.collection('infoCards').doc('card_3');

    // M√©todos laboratoriais
    const metodosLabRef = card3Ref.collection('detalhes').doc('metodos-laboratoriais');
    batch.set(metodosLabRef, {
      title: "M√©todos Laboratoriais",
      description: "Exames laboratoriais para diagn√≥stico de tuberculose",
      order: 1,
      data: metodosLaboratoriais,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // M√©todos imunol√≥gicos
    const metodosImunoRef = card3Ref.collection('detalhes').doc('metodos-imunologicos');
    batch.set(metodosImunoRef, {
      title: "M√©todos Imunol√≥gicos",
      description: "Testes imunol√≥gicos para detec√ß√£o de tuberculose",
      order: 2,
      data: metodosImunologicos,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // M√©todos de imagem
    const metodosImagemRef = card3Ref.collection('detalhes').doc('metodos-imagem');
    batch.set(metodosImagemRef, {
      title: "M√©todos de Imagem",
      description: "Exames de imagem no diagn√≥stico da tuberculose",
      order: 3,
      data: metodosImagem,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Fluxograma diagn√≥stico
    const fluxogramaRef = card3Ref.collection('detalhes').doc('fluxograma-diagnostico');
    batch.set(fluxogramaRef, {
      title: "Fluxograma Diagn√≥stico",
      description: "Algoritmos diagn√≥sticos por popula√ß√£o",
      order: 4,
      data: fluxogramaDiagnostico,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Diagn√≥stico diferencial
    const diagDiferencialRef = card3Ref.collection('detalhes').doc('diagnostico-diferencial');
    batch.set(diagDiferencialRef, {
      title: "Diagn√≥stico Diferencial",
      description: "Doen√ßas a serem diferenciadas da tuberculose",
      order: 5,
      data: diagnosticoDiferencial,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Biomarcadores
    const biomarcadoresRef = card3Ref.collection('detalhes').doc('biomarcadores');
    batch.set(biomarcadoresRef, {
      title: "Biomarcadores",
      description: "Marcadores biol√≥gicos auxiliares no diagn√≥stico",
      order: 6,
      data: biomarcadores,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Algoritmo de tratamento
    const algoritmoRef = card3Ref.collection('detalhes').doc('algoritmo-tratamento');
    batch.set(algoritmoRef, {
      title: "Algoritmo de Decis√£o Terap√™utica",
      description: "Decis√µes baseadas em resultados de exames",
      order: 7,
      data: algoritmoTratamento,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Crit√©rios especiais
    const criteriosRef = card3Ref.collection('detalhes').doc('criterios-especiais');
    batch.set(criteriosRef, {
      title: "Crit√©rios Especiais",
      description: "Crit√©rios diagn√≥sticos para popula√ß√µes espec√≠ficas",
      order: 8,
      data: criteriosEspeciais,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    await batch.commit();

    console.log('‚úÖ Subcole√ß√£o detalhes populada com sucesso em card_3!');
    console.log('üìä Documentos criados em infoCards/card_3/detalhes:');
    console.log('  - metodos-laboratoriais');
    console.log('  - metodos-imunologicos');
    console.log('  - metodos-imagem');
    console.log('  - fluxograma-diagnostico');
    console.log('  - diagnostico-diferencial');
    console.log('  - biomarcadores');
    console.log('  - algoritmo-tratamento');
    console.log('  - criterios-especiais');

    // Verificar se os dados foram inseridos
    const snapshot = await card3Ref.collection('detalhes').get();
    console.log(`üîç Verifica√ß√£o: ${snapshot.size} documentos encontrados na subcole√ß√£o`);

  } catch (error) {
    console.error('‚ùå Erro ao popular a subcole√ß√£o:', error);
  }
}

async function clearDiagnostico() {
  try {
    console.log('üóëÔ∏è Limpando subcole√ß√£o detalhes do card_3...');

    const card3Ref = db.collection('infoCards').doc('card_3');
    const snapshot = await card3Ref.collection('detalhes').get();
    const batch = db.batch();

    snapshot.docs.forEach((doc) => {
      batch.delete(doc.ref);
    });

    await batch.commit();
    console.log('‚úÖ Subcole√ß√£o detalhes do card_3 limpa com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao limpar a subcole√ß√£o:', error);
  }
}

async function listDiagnostico() {
  try {
    console.log('üìã Listando documentos da subcole√ß√£o detalhes do card_3:');

    const card3Ref = db.collection('infoCards').doc('card_3');
    const snapshot = await card3Ref.collection('detalhes')
      .orderBy('order', 'asc')
      .get();

    if (snapshot.empty) {
      console.log('Nenhum documento encontrado.');
      return;
    }

    snapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`${data.order}. ${data.title} (${doc.id})`);
      if (data.description) {
        console.log(`   ${data.description}`);
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao listar documentos da subcole√ß√£o:', error);
  }
}

async function getDiagnosticoDetails() {
  try {
    console.log('üîç Detalhes da subcole√ß√£o detalhes do card_3:');

    const card3Ref = db.collection('infoCards').doc('card_3');
    const snapshot = await card3Ref.collection('detalhes').get();

    for (const doc of snapshot.docs) {
      const data = doc.data();
      console.log(`\nüìÑ ${doc.id}:`);
      console.log(`   T√≠tulo: ${data.title}`);

      if (data.data && Array.isArray(data.data)) {
        console.log(`   Itens: ${data.data.length}`);
      } else if (data.data && typeof data.data === 'object') {
        const keys = Object.keys(data.data);
        console.log(`   Se√ß√µes: ${keys.join(', ')}`);
        keys.forEach(key => {
          if (Array.isArray(data.data[key])) {
            console.log(`     ${key}: ${data.data[key].length} itens`);
          }
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erro ao obter detalhes da subcole√ß√£o:', error);
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'populate':
      await populateDiagnostico();
      break;
    case 'clear':
      await clearDiagnostico();
      break;
    case 'list':
      await listDiagnostico();
      break;
    case 'details':
      await getDiagnosticoDetails();
      break;
    case 'reset':
      await clearDiagnostico();
      await populateDiagnostico();
      break;
    default:
      console.log('üìñ Comandos dispon√≠veis para subcole√ß√£o detalhes do card_3:');
      console.log('  populate - Popula a subcole√ß√£o com os dados');
      console.log('  clear    - Limpa todos os documentos da subcole√ß√£o');
      console.log('  list     - Lista todos os documentos da subcole√ß√£o');
      console.log('  details  - Mostra detalhes dos documentos');
      console.log('  reset    - Limpa e popula novamente a subcole√ß√£o');
      console.log('');
      console.log('üí° Exemplo: node populate-diagnostico.js populate');
      console.log('üèóÔ∏è Estrutura: infoCards/card_3/detalhes/[documentos]');
  }

  process.exit(0);
}

main();