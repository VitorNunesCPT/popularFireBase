const { db } = require('./firebase-config');
const {
  interacoesMedicamentos,
  epidemiologia,
  cronogramaTARV,
  cuidadosEspeciais,
  iris,
  esquemasTerapeuticos,
  profilaxias,
  criteriosLaboratoriais,
  locaisAtendimento,
} = require('./data/tb-hiv-data');

async function populateTbHiv() {
  try {
    console.log('üîÑ Iniciando popula√ß√£o da subcole√ß√£o em card_10...');

    const batch = db.batch();

    // Refer√™ncia para o card_10 (TB-HIV Coinfec√ß√£o)
    const card10Ref = db.collection('infoCards').doc('card_10');

    // Intera√ß√µes medicamentosas
    const interacoesRef = card10Ref.collection('detalhes').doc('interacoes-medicamentos');
    batch.set(interacoesRef, {
      title: "Intera√ß√µes Medicamentosas",
      description: "Intera√ß√µes entre medicamentos para TB e antirretrovirais",
      order: 1,
      data: interacoesMedicamentos,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Epidemiologia
    const epidemiologiaRef = card10Ref.collection('detalhes').doc('epidemiologia');
    batch.set(epidemiologiaRef, {
      title: "Epidemiologia",
      description: "Dados epidemiol√≥gicos da coinfec√ß√£o TB-HIV",
      order: 2,
      data: epidemiologia,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Cronograma TARV
    const cronogramaRef = card10Ref.collection('detalhes').doc('cronograma-tarv');
    batch.set(cronogramaRef, {
      title: "Cronograma de In√≠cio do TARV",
      description: "Quando iniciar tratamento antirretroviral conforme CD4+",
      order: 3,
      data: cronogramaTARV,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Cuidados especiais
    const cuidadosRef = card10Ref.collection('detalhes').doc('cuidados-especiais');
    batch.set(cuidadosRef, {
      title: "Cuidados Especiais",
      description: "Abordagens espec√≠ficas para diagn√≥stico, tratamento e monitoramento",
      order: 4,
      data: cuidadosEspeciais,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // IRIS (S√≠ndrome Inflamat√≥ria de Reconstitui√ß√£o Imune)
    const irisRef = card10Ref.collection('detalhes').doc('iris');
    batch.set(irisRef, {
      title: "IRIS - S√≠ndrome Inflamat√≥ria de Reconstitui√ß√£o Imune",
      description: "Tipos, manifesta√ß√µes e manejo da IRIS",
      order: 5,
      data: iris,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Esquemas terap√™uticos
    const esquemasRef = card10Ref.collection('detalhes').doc('esquemas-terapeuticos');
    batch.set(esquemasRef, {
      title: "Esquemas Terap√™uticos",
      description: "Esquemas de tratamento conforme ARV em uso",
      order: 6,
      data: esquemasTerapeuticos,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Profilaxias
    const profilaxiasRef = card10Ref.collection('detalhes').doc('profilaxias');
    batch.set(profilaxiasRef, {
      title: "Profilaxias",
      description: "Profilaxias para infec√ß√µes oportunistas",
      order: 7,
      data: profilaxias,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Crit√©rios laboratoriais
    const criteriosRef = card10Ref.collection('detalhes').doc('criterios-laboratoriais');
    batch.set(criteriosRef, {
      title: "Crit√©rios Laboratoriais",
      description: "Par√¢metros laboratoriais para monitoramento",
      order: 8,
      data: criteriosLaboratoriais,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    // Locais de atendimento
    const locaisRef = card10Ref.collection('detalhes').doc('locais-atendimento');
    batch.set(locaisRef, {
      title: "Locais de Atendimento",
      description: "Organiza√ß√£o da rede de cuidado para coinfec√ß√£o TB-HIV",
      order: 9,
      data: locaisAtendimento,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    await batch.commit();

    console.log('‚úÖ Subcole√ß√£o detalhes populada com sucesso em card_10!');
    console.log('üìä Documentos criados em infoCards/card_10/detalhes:');
    console.log('  - interacoes-medicamentos');
    console.log('  - epidemiologia');
    console.log('  - cronograma-tarv');
    console.log('  - cuidados-especiais');
    console.log('  - iris');
    console.log('  - esquemas-terapeuticos');
    console.log('  - profilaxias');
    console.log('  - criterios-laboratoriais');
    console.log('  - locais-atendimento');

    // Verificar se os dados foram inseridos
    const snapshot = await card10Ref.collection('detalhes').get();
    console.log(`üîç Verifica√ß√£o: ${snapshot.size} documentos encontrados na subcole√ß√£o`);

  } catch (error) {
    console.error('‚ùå Erro ao popular a subcole√ß√£o:', error);
  }
}

async function clearTbHiv() {
  try {
    console.log('üóëÔ∏è Limpando subcole√ß√£o detalhes do card_10...');

    const card10Ref = db.collection('infoCards').doc('card_10');
    const snapshot = await card10Ref.collection('detalhes').get();
    const batch = db.batch();

    snapshot.docs.forEach((doc) => {
      batch.delete(doc.ref);
    });

    await batch.commit();
    console.log('‚úÖ Subcole√ß√£o detalhes do card_10 limpa com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao limpar a subcole√ß√£o:', error);
  }
}

async function listTbHiv() {
  try {
    console.log('üìã Listando documentos da subcole√ß√£o detalhes do card_10:');

    const card10Ref = db.collection('infoCards').doc('card_10');
    const snapshot = await card10Ref.collection('detalhes')
      .orderBy('order', 'asc')
      .get();

    if (snapshot.empty) {
      console.log('Nenhum documento encontrado.');
      return;
    }

    snapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`${data.order}. ${data.title} (${doc.id})`);
      if (data.description) {
        console.log(`   ${data.description}`);
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao listar documentos da subcole√ß√£o:', error);
  }
}

async function getTbHivDetails() {
  try {
    console.log('üîç Detalhes da subcole√ß√£o detalhes do card_10:');

    const card10Ref = db.collection('infoCards').doc('card_10');
    const snapshot = await card10Ref.collection('detalhes').get();

    for (const doc of snapshot.docs) {
      const data = doc.data();
      console.log(`\nüìÑ ${doc.id}:`);
      console.log(`   T√≠tulo: ${data.title}`);

      if (data.data && Array.isArray(data.data)) {
        console.log(`   Itens: ${data.data.length}`);
      } else if (data.data && typeof data.data === 'object') {
        const keys = Object.keys(data.data);
        console.log(`   Se√ß√µes: ${keys.join(', ')}`);
        keys.forEach(key => {
          if (Array.isArray(data.data[key])) {
            console.log(`     ${key}: ${data.data[key].length} itens`);
          }
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erro ao obter detalhes da subcole√ß√£o:', error);
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'populate':
      await populateTbHiv();
      break;
    case 'clear':
      await clearTbHiv();
      break;
    case 'list':
      await listTbHiv();
      break;
    case 'details':
      await getTbHivDetails();
      break;
    case 'reset':
      await clearTbHiv();
      await populateTbHiv();
      break;
    default:
      console.log('üìñ Comandos dispon√≠veis para subcole√ß√£o detalhes do card_10:');
      console.log('  populate - Popula a subcole√ß√£o com os dados');
      console.log('  clear    - Limpa todos os documentos da subcole√ß√£o');
      console.log('  list     - Lista todos os documentos da subcole√ß√£o');
      console.log('  details  - Mostra detalhes dos documentos');
      console.log('  reset    - Limpa e popula novamente a subcole√ß√£o');
      console.log('');
      console.log('üí° Exemplo: node populate-tb-hiv.js populate');
      console.log('üèóÔ∏è Estrutura: infoCards/card_10/detalhes/[documentos]');
  }

  process.exit(0);
}

main();